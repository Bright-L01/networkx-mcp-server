# Kubernetes deployment manifests for NetworkX MCP Server
# Production-ready with autoscaling, monitoring, and security

---
# Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: networkx-mcp
  labels:
    app.kubernetes.io/name: networkx-mcp
    app.kubernetes.io/version: "2.0.0"

---
# ConfigMap for application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: networkx-mcp-config
  namespace: networkx-mcp
data:
  app.yaml: |
    app:
      name: "NetworkX MCP Server"
      version: "2.0.0"
      environment: "production"
      debug: false
      
    server:
      host: "0.0.0.0"
      port: 8000
      workers: 4
      
    redis:
      host: "redis-service"
      port: 6379
      db: 0
      
    postgres:
      host: "postgres-service"
      port: 5432
      database: "networkx_mcp"
      username: "networkx"
      
    monitoring:
      enabled: true
      metrics_port: 9090
      
    logging:
      level: "INFO"
      format: "json"
      
    features:
      rate_limiting: true
      caching: true
      tracing: true

---
# Secret for sensitive configuration
apiVersion: v1
kind: Secret
metadata:
  name: networkx-mcp-secrets
  namespace: networkx-mcp
type: Opaque
data:
  postgres-password: cGFzc3dvcmQ=  # base64 encoded "password"
  jwt-secret: c3VwZXItc2VjcmV0LWp3dC1rZXk=  # base64 encoded
  redis-password: ""  # empty for development

---
# Persistent Volume Claim for data storage
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: networkx-mcp-data
  namespace: networkx-mcp
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: fast-ssd

---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: networkx-mcp
  labels:
    app: redis
spec:
  ports:
    - port: 6379
      targetPort: 6379
  selector:
    app: redis

---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: networkx-mcp
  labels:
    app: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
        - name: redis
          image: redis:7-alpine
          ports:
            - containerPort: 6379
          command:
            - redis-server
            - --appendonly
            - "yes"
            - --maxmemory
            - "256mb"
            - --maxmemory-policy
            - "allkeys-lru"
          volumeMounts:
            - name: redis-data
              mountPath: /data
          resources:
            limits:
              memory: "512Mi"
              cpu: "500m"
            requests:
              memory: "256Mi"
              cpu: "100m"
          livenessProbe:
            exec:
              command:
                - redis-cli
                - ping
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            exec:
              command:
                - redis-cli
                - ping
            initialDelaySeconds: 5
            periodSeconds: 5
      volumes:
        - name: redis-data
          emptyDir: {}

---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: networkx-mcp
  labels:
    app: postgres
spec:
  ports:
    - port: 5432
      targetPort: 5432
  selector:
    app: postgres

---
# PostgreSQL Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: networkx-mcp
  labels:
    app: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:15-alpine
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_DB
              value: "networkx_mcp"
            - name: POSTGRES_USER
              value: "networkx"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: networkx-mcp-secrets
                  key: postgres-password
          volumeMounts:
            - name: postgres-data
              mountPath: /var/lib/postgresql/data
          resources:
            limits:
              memory: "1Gi"
              cpu: "500m"
            requests:
              memory: "512Mi"
              cpu: "100m"
          livenessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - networkx
                - -d
                - networkx_mcp
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - networkx
                - -d
                - networkx_mcp
            initialDelaySeconds: 5
            periodSeconds: 5
      volumes:
        - name: postgres-data
          persistentVolumeClaim:
            claimName: networkx-mcp-data

---
# NetworkX MCP Service
apiVersion: v1
kind: Service
metadata:
  name: networkx-mcp-service
  namespace: networkx-mcp
  labels:
    app: networkx-mcp
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 8000
      targetPort: 8000
    - name: metrics
      port: 9090
      targetPort: 9090
  selector:
    app: networkx-mcp

---
# NetworkX MCP Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: networkx-mcp
  namespace: networkx-mcp
  labels:
    app: networkx-mcp
    version: "2.0.0"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: networkx-mcp
  template:
    metadata:
      labels:
        app: networkx-mcp
        version: "2.0.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: networkx-mcp-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
        - name: networkx-mcp
          image: networkx-mcp:2.0.0
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8000
              name: http
            - containerPort: 9090
              name: metrics
          env:
            - name: APP_ENV
              value: "production"
            - name: LOG_LEVEL
              value: "INFO"
            - name: REDIS_URL
              value: "redis://redis-service:6379/0"
            - name: POSTGRES_URL
              value: "postgresql://networkx:$(POSTGRES_PASSWORD)@postgres-service:5432/networkx_mcp"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: networkx-mcp-secrets
                  key: postgres-password
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: networkx-mcp-secrets
                  key: jwt-secret
            - name: MONITORING_ENABLED
              value: "true"
            - name: TRACING_ENABLED
              value: "true"
          volumeMounts:
            - name: config-volume
              mountPath: /app/config
              readOnly: true
            - name: data-volume
              mountPath: /app/data
            - name: logs-volume
              mountPath: /app/logs
          resources:
            limits:
              memory: "2Gi"
              cpu: "1000m"
            requests:
              memory: "512Mi"
              cpu: "200m"
          livenessProbe:
            httpGet:
              path: /health
              port: 8000
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /ready
              port: 8000
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL
      volumes:
        - name: config-volume
          configMap:
            name: networkx-mcp-config
        - name: data-volume
          emptyDir: {}
        - name: logs-volume
          emptyDir: {}

---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: networkx-mcp-hpa
  namespace: networkx-mcp
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: networkx-mcp
  minReplicas: 3
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80

---
# Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: networkx-mcp-service-account
  namespace: networkx-mcp

---
# Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: networkx-mcp-pdb
  namespace: networkx-mcp
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: networkx-mcp

---
# Network Policy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: networkx-mcp-network-policy
  namespace: networkx-mcp
spec:
  podSelector:
    matchLabels:
      app: networkx-mcp
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: ingress-nginx
    - from:
        - namespaceSelector:
            matchLabels:
              name: monitoring
    - ports:
        - protocol: TCP
          port: 8000
        - protocol: TCP
          port: 9090
  egress:
    - to:
        - podSelector:
            matchLabels:
              app: redis
    - to:
        - podSelector:
            matchLabels:
              app: postgres
    - ports:
        - protocol: TCP
          port: 53
        - protocol: UDP
          port: 53

---
# Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: networkx-mcp-ingress
  namespace: networkx-mcp
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
    - hosts:
        - networkx-mcp.example.com
      secretName: networkx-mcp-tls
  rules:
    - host: networkx-mcp.example.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: networkx-mcp-service
                port:
                  number: 8000