apiVersion: apps/v1
kind: Deployment
metadata:
  name: networkx-mcp-server
  namespace: default
  labels:
    app: networkx-mcp
    version: "1.0.0"
    component: mcp-server
    tier: production
spec:
  # Based on testing: 50 concurrent users per instance, 95.2% success rate
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: networkx-mcp
      tier: production
  template:
    metadata:
      labels:
        app: networkx-mcp
        version: "1.0.0"
        tier: production
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: mcp-server
        image: networkx-mcp:1.0.0
        imagePullPolicy: IfNotPresent
        
        # Command based on our actual server structure
        command: ["python", "-m", "networkx_mcp.server"]
        args: ["--jsonrpc"]
        
        ports:
        - name: health
          containerPort: 8080
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        
        # Environment variables based on production config and testing
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: LOG_LEVEL
          value: "INFO"
        - name: LOG_FORMAT
          value: "json"
          
        # Storage configuration
        - name: STORAGE_BACKEND
          value: "redis"
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: redis-credentials
              key: url
        - name: REDIS_MAX_CONNECTIONS
          value: "20"
        
        # Authentication
        - name: ENABLE_AUTH
          value: "true"
        - name: AUTH_TOKEN
          valueFrom:
            secretKeyRef:
              name: mcp-auth
              key: token
              
        # Performance limits based on testing
        - name: MAX_CONCURRENT_CONNECTIONS
          value: "45"  # 90% of 50-user tested limit
        - name: MAX_GRAPH_SIZE_NODES
          value: "10000"  # Conservative for good performance
        - name: MAX_MEMORY_MB
          value: "2048"
        - name: REQUEST_TIMEOUT
          value: "20"
        
        # Container identification
        - name: CONTAINER_MODE
          value: "true"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        
        # Health check configuration
        - name: HEALTH_CHECK_PORT
          value: "8080"
        - name: METRICS_PORT
          value: "9090"
        
        # Resource limits based on testing results:
        # - 50K nodes = 450MB memory
        # - 50 users = 185MB peak memory
        # - Conservative limits for production stability
        resources:
          requests:
            memory: "1Gi"      # Base requirement
            cpu: "500m"        # 0.5 CPU cores
          limits:
            memory: "2Gi"      # Based on MAX_MEMORY_MB config
            cpu: "1000m"       # 1 CPU core max
        
        # Health checks based on our health server implementation
        livenessProbe:
          httpGet:
            path: /health
            port: health
          initialDelaySeconds: 15    # Allow startup time
          periodSeconds: 20          # Check every 20s
          timeoutSeconds: 5          # 5s timeout
          failureThreshold: 3        # Restart after 3 failures
          
        readinessProbe:
          httpGet:
            path: /ready
            port: health
          initialDelaySeconds: 5     # Quick initial check
          periodSeconds: 10          # Check every 10s
          timeoutSeconds: 3          # Fast timeout
          failureThreshold: 2        # Remove from LB after 2 failures
          
        startupProbe:
          httpGet:
            path: /startup
            port: health
          initialDelaySeconds: 10    # Allow startup
          periodSeconds: 5           # Check frequently during startup
          timeoutSeconds: 3
          failureThreshold: 6        # 30 seconds total startup time
        
        # Security context for production
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        
        # Volume mounts for temporary storage and logs
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: cache
          mountPath: /app/cache
        - name: logs
          mountPath: /app/logs
      
      # Pod-level security context
      securityContext:
        fsGroup: 1000
        runAsNonRoot: true
      
      # Volumes for temporary data
      volumes:
      - name: tmp
        emptyDir:
          sizeLimit: 100Mi
      - name: cache
        emptyDir:
          sizeLimit: 200Mi
      - name: logs
        emptyDir:
          sizeLimit: 100Mi
      
      # Graceful shutdown (based on our 30s shutdown timeout)
      terminationGracePeriodSeconds: 35
      
      # Pod anti-affinity for high availability
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - networkx-mcp
              topologyKey: kubernetes.io/hostname

---
apiVersion: v1
kind: Service
metadata:
  name: networkx-mcp-service
  labels:
    app: networkx-mcp
    tier: production
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
    prometheus.io/path: "/metrics"
spec:
  selector:
    app: networkx-mcp
    tier: production
  ports:
  - name: health
    port: 8080
    targetPort: health
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: metrics
    protocol: TCP
  type: ClusterIP

---
# Horizontal Pod Autoscaler based on performance testing
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: networkx-mcp-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: networkx-mcp-server
  minReplicas: 2                      # Minimum for HA
  maxReplicas: 10                     # Based on infrastructure capacity
  metrics:
  # Memory is our primary constraint based on testing
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 70        # Scale at 70% of 2GB = 1.4GB
  # CPU scaling for compute-intensive algorithms
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 60        # Scale at 60% CPU
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300  # 5 minutes stability
      policies:
      - type: Percent
        value: 50                      # Scale down max 50% at once
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60   # 1 minute stability
      policies:
      - type: Percent
        value: 100                     # Can double quickly under load
        periodSeconds: 60

---
# Pod Disruption Budget for high availability
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: networkx-mcp-pdb
spec:
  minAvailable: 2                     # Always keep 2 pods running
  selector:
    matchLabels:
      app: networkx-mcp
      tier: production

---
# Network Policy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: networkx-mcp-network-policy
spec:
  podSelector:
    matchLabels:
      app: networkx-mcp
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow monitoring from Prometheus
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 9090
  # Allow health checks from kube-system
  - from:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    ports:
    - protocol: TCP
      port: 8080
  egress:
  # Allow Redis connection
  - to:
    - namespaceSelector:
        matchLabels:
          name: redis
    ports:
    - protocol: TCP
      port: 6379
  # Allow DNS resolution
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53

---
# ServiceMonitor for Prometheus monitoring
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: networkx-mcp-metrics
  labels:
    app: networkx-mcp
    tier: production
spec:
  selector:
    matchLabels:
      app: networkx-mcp
      tier: production
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics
    timeout: 10s
  jobLabel: app

---
# ConfigMap for Redis configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-config
data:
  redis.conf: |
    # Redis configuration for NetworkX MCP
    maxmemory 512mb
    maxmemory-policy allkeys-lru
    appendonly yes
    appendfsync everysec
    save 900 1
    save 300 10
    save 60 10000

---
# Redis deployment for storage backend
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  labels:
    app: redis
    component: storage
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
        component: storage
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        command:
        - redis-server
        - /usr/local/etc/redis/redis.conf
        volumeMounts:
        - name: redis-config
          mountPath: /usr/local/etc/redis
        - name: redis-data
          mountPath: /data
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: redis-config
        configMap:
          name: redis-config
      - name: redis-data
        emptyDir: {}

---
# Redis service
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  labels:
    app: redis
    component: storage
spec:
  ports:
  - port: 6379
    targetPort: 6379
  selector:
    app: redis