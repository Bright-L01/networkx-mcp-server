# Secure Docker Compose for NetworkX MCP Server
# This version uses proper secret management and security settings

version: '3.8'

services:
  # ================================
  # NetworkX MCP Server (Secured)
  # ================================
  networkx-mcp:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: networkx-mcp-server
    restart: unless-stopped
    ports:
      - "127.0.0.1:8000:8000"  # Only bind to localhost
    environment:
      # Application settings
      - APP_ENV=production
      - LOG_LEVEL=INFO
      - DEBUG=false
      
      # Resource limits
      - MAX_MEMORY_MB=${MAX_MEMORY_MB:-1024}
      - MAX_GRAPH_SIZE_MB=${MAX_GRAPH_SIZE_MB:-100}
      - OPERATION_TIMEOUT=${OPERATION_TIMEOUT:-30}
      - MAX_CONCURRENT_REQUESTS=${MAX_CONCURRENT_REQUESTS:-10}
      - REQUESTS_PER_MINUTE=${REQUESTS_PER_MINUTE:-60}
      
      # Database URLs (passwords from env file)
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - POSTGRES_URL=postgresql://networkx:${POSTGRES_PASSWORD}@postgres:5432/networkx_mcp
      
      # Security
      - JWT_SECRET=${JWT_SECRET}
      - MONITORING_ENABLED=true
      - TRACING_ENABLED=true
    
    # Load secrets from .env file
    env_file:
      - .env
    
    # Security settings
    security_opt:
      - no-new-privileges:true
    read_only: true
    user: "1000:1000"
    
    # Temporary filesystems for writable areas
    tmpfs:
      - /tmp
      - /app/logs
      - /app/data
    
    volumes:
      - ./config:/app/config:ro  # Read-only config
    
    depends_on:
      - redis
      - postgres
    
    networks:
      - networkx-network
    
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.25'

  # ================================
  # Redis (Secured)
  # ================================
  redis:
    image: redis:7-alpine
    container_name: networkx-redis
    restart: unless-stopped
    command: >
      redis-server
      --appendonly yes
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --requirepass ${REDIS_PASSWORD}
    
    # Security settings
    security_opt:
      - no-new-privileges:true
    read_only: true
    user: "999:999"  # Redis user
    
    volumes:
      - redis_data:/data
    
    tmpfs:
      - /tmp
    
    networks:
      - networkx-network
    
    healthcheck:
      test: ["CMD", "redis-cli", "--pass", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # ================================
  # PostgreSQL (Secured)
  # ================================
  postgres:
    image: postgres:15-alpine
    container_name: networkx-postgres
    restart: unless-stopped
    
    environment:
      POSTGRES_DB: networkx_mcp
      POSTGRES_USER: networkx
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --auth-host=scram-sha-256 --auth-local=scram-sha-256"
    
    # Security settings
    security_opt:
      - no-new-privileges:true
    user: "70:70"  # postgres user
    
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    
    networks:
      - networkx-network
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U networkx -d networkx_mcp"]
      interval: 30s
      timeout: 5s
      retries: 3
    
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # ================================
  # NGINX Reverse Proxy (Secured)
  # ================================
  nginx:
    image: nginx:1.25-alpine
    container_name: networkx-nginx
    restart: unless-stopped
    
    ports:
      - "443:443"  # HTTPS only
      - "80:80"    # For redirect to HTTPS
    
    # Security settings
    security_opt:
      - no-new-privileges:true
    read_only: true
    user: "101:101"  # nginx user
    
    tmpfs:
      - /var/cache/nginx
      - /var/run
    
    volumes:
      - ./docker/nginx/nginx-secure.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    
    depends_on:
      - networkx-mcp
    
    networks:
      - networkx-network
    
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

# ================================
# Networks
# ================================
networks:
  networkx-network:
    driver: bridge
    internal: true  # No external access except through nginx

# ================================
# Volumes
# ================================
volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  nginx_logs:
    driver: local