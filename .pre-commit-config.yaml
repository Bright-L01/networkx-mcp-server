# NetworkX MCP Server - Enhanced Pre-commit Configuration
# This configuration implements comprehensive code quality checks
# Run `pre-commit install` to install the git hooks

repos:
  # Core Python formatting and linting
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v5.0.0
    hooks:
      - id: trailing-whitespace
        args: [--markdown-linebreak-ext=md]
      - id: end-of-file-fixer
      - id: check-yaml
        args: [--allow-multiple-documents]
      - id: check-json
      - id: check-toml
      - id: check-merge-conflict
      - id: check-case-conflict
      - id: check-symlinks
      - id: check-added-large-files
        args: [--maxkb=1000]
      - id: check-docstring-first
      - id: check-executables-have-shebangs
      - id: debug-statements
      - id: name-tests-test
      - id: requirements-txt-fixer
      - id: mixed-line-ending

  # Python code formatting with Black
  - repo: https://github.com/psf/black
    rev: '24.10.0'
    hooks:
      - id: black
        name: Format Python code (Black)
        args: [--config=pyproject.toml]
        language_version: python3.11

  # Import sorting with isort
  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        name: Sort Python imports (isort)
        args: [--profile=black, --line-length=88]

  # Modern Python linting with Ruff
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.8.4
    hooks:
      - id: ruff
        name: Lint Python code (Ruff)
        args: [--config=pyproject.toml, --fix, --exit-non-zero-on-fix]
      - id: ruff-format
        name: Format Python code (Ruff)
        args: [--config=pyproject.toml]

  # Type checking with MyPy
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.13.0
    hooks:
      - id: mypy
        name: Type check Python code (MyPy)
        args: [--config-file=pyproject.toml]
        additional_dependencies:
          - types-PyYAML>=6.0.12
          - types-aiofiles>=24.1.0
          - types-redis>=4.6.0
          - types-requests>=2.32.0
          - pandas-stubs>=2.2.2
          - types-psutil>=6.1.0
        exclude: ^(tests/|scripts/|docs/)

  # Security scanning with Bandit
  - repo: https://github.com/PyCQA/bandit
    rev: '1.8.0'
    hooks:
      - id: bandit
        name: Security scan Python code (Bandit)
        args: [--configfile=pyproject.toml]
        additional_dependencies: ["bandit[toml]"]
        exclude: ^tests/

  # Dependency vulnerability scanning
  - repo: https://github.com/Lucas-C/pre-commit-hooks-safety
    rev: v1.3.3
    hooks:
      - id: python-safety-dependencies-check
        name: Check Python dependencies for vulnerabilities (Safety)
        args: [--ignore=70612]

  # Upgrade Python syntax
  - repo: https://github.com/asottile/pyupgrade
    rev: v3.19.0
    hooks:
      - id: pyupgrade
        name: Upgrade Python syntax (pyupgrade)
        args: [--py311-plus]

  # Remove unused imports and variables
  - repo: https://github.com/PyCQA/autoflake
    rev: v2.3.1
    hooks:
      - id: autoflake
        name: Remove unused imports and variables (autoflake)
        args:
          - --in-place
          - --remove-all-unused-imports
          - --remove-unused-variables
          - --remove-duplicate-keys
          - --ignore-init-module-imports

  # Conventional commits
  - repo: https://github.com/compilerla/conventional-pre-commit
    rev: v3.4.0
    hooks:
      - id: conventional-pre-commit
        name: Validate commit message format
        stages: [commit-msg]

  # Documentation checks
  - repo: https://github.com/pycqa/pydocstyle
    rev: 6.3.0
    hooks:
      - id: pydocstyle
        name: Check Python docstrings (pydocstyle)
        args: [--convention=google]
        exclude: ^(tests/|scripts/)

  # Secrets detection
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.5.0
    hooks:
      - id: detect-secrets
        name: Detect secrets in code
        args: [--baseline, .secrets.baseline]
        exclude: ^(\.secrets\.baseline|.*\.lock|package-lock\.json)$

  # Local custom hooks
  - repo: local
    hooks:
      # Fast unit tests on commit
      - id: pytest-fast
        name: Run fast unit tests
        entry: python -m pytest tests/unit/ -x --tb=short --durations=5
        language: system
        types: [python]
        pass_filenames: false
        stages: [push]

      # Security tests
      - id: security-tests
        name: Run security tests
        entry: python -m pytest tests/security/ -x --tb=short
        language: system
        types: [python]
        pass_filenames: false
        stages: [push]

      # Light quality gate check
      - id: quality-gate-light
        name: Light quality gate check
        entry: python scripts/quality_gate.py --checks ruff mypy coverage --fail-fast
        language: system
        types: [python]
        pass_filenames: false
        stages: [push]

      # Check for TODO/FIXME comments in production code
      - id: no-todos-production
        name: Check for TODO/FIXME in production code
        entry: bash -c 'if grep -r --include="*.py" --exclude-dir=tests --exclude-dir=scripts "TODO\|FIXME\|XXX\|HACK" src/; then echo "Remove TODO/FIXME comments from production code"; exit 1; fi'
        language: system
        pass_filenames: false

      # Validate Python imports
      - id: validate-imports
        name: Validate Python imports
        entry: python -c "
import ast
import sys
from pathlib import Path

def check_imports(file_path):
    try:
        with open(file_path, 'r') as f:
            tree = ast.parse(f.read())
        return True
    except Exception as e:
        print(f'Import validation failed for {file_path}: {e}')
        return False

failed = False
for py_file in Path('src').rglob('*.py'):
    if not check_imports(py_file):
        failed = True

sys.exit(1 if failed else 0)
"
        language: system
        types: [python]
        pass_filenames: false

# Configuration
default_stages: [commit]
fail_fast: false
minimum_pre_commit_version: '3.0.0'
