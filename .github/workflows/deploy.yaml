name: Deploy NetworkX MCP Server

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      skip_tests:
        description: 'Skip test execution'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/networkx-mcp-server
  PYTHON_VERSION: "3.11"

jobs:
  # Run comprehensive test suite
  test:
    name: Run Test Suite
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests }}
    timeout-minutes: 30

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run linting
      run: |
        ruff check . --output-format=github || true
        ruff format --check . || true

    - name: Run type checking
      run: |
        mypy src/networkx_mcp/ --ignore-missing-imports || true

    - name: Run security checks
      run: |
        bandit -r src/networkx_mcp/ -ll || true

    - name: Run tests
      run: |
        pytest tests/working/ -v --tb=short

  # Validate MCP implementation before deployment
  validate:
    name: Validate MCP Implementation
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .

    - name: Validate MCP Protocol
      run: |
        echo "üîç Validating MCP protocol implementation..."

        # Test that the server can start and respond to MCP requests
        python -c "
        import sys
        try:
            from networkx_mcp import server
            print('‚úÖ MCP server module imports successfully')
        except ImportError as e:
            print(f'‚ùå ERROR: Failed to import MCP server: {e}')
            sys.exit(1)
        "

        # Run reality check test
        python tests/development_archive/simple_reality_test_fixed.py || echo "‚ö†Ô∏è Reality test issues detected"

  # Build Docker image
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: validate
    permissions:
      contents: read
      packages: write

    outputs:
      image: ${{ steps.image.outputs.image }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Output image
      id: image
      run: echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}" >> $GITHUB_OUTPUT

  # Deploy to PyPI
  deploy-pypi:
    name: Deploy to PyPI
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    environment: pypi

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: python -m build

    - name: Check package
      run: twine check dist/*

    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*

  # Create GitHub Release
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build, deploy-pypi]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Generate changelog
      id: changelog
      run: |
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          ## Changes in this Release
          ${{ steps.changelog.outputs.CHANGELOG }}

          ## Docker Image
          `${{ needs.build.outputs.image }}`

          ## Installation
          ```bash
          pip install networkx-mcp==${{ github.ref_name }}
          ```
        draft: false
        prerelease: false

  # Deploy notification
  notify:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [build, deploy-pypi, release]
    if: always()

    steps:
    - name: Send deployment status
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "‚úÖ Deployment successful!"
          echo "Version: ${{ github.ref_name }}"
          echo "PyPI: https://pypi.org/project/networkx-mcp/"
          echo "Docker: ${{ needs.build.outputs.image }}"
        else
          echo "‚ùå Deployment failed!"
          echo "Check the workflow logs for details."
        fi
