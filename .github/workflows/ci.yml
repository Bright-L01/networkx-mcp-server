name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * 0'  # Weekly on Sunday

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ruff black mypy

    - name: Lint with ruff
      run: |
        ruff check src/ tests/ || true
        # Run again with only the configured rules
        ruff check src/ tests/ --exit-non-zero-on-fix

    - name: Check formatting with black
      run: black --check src/ tests/

    - name: Type check with mypy
      run: |
        pip install types-PyYAML types-aiofiles types-redis types-psutil pandas-stubs types-requests types-PyMySQL
        mypy src/ --ignore-missing-imports --python-version 3.8

  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run tests
      shell: bash
      run: |
        # Run all tests with pytest
        python -m pytest tests/ -v --cov=src/networkx_mcp --cov-report=xml --cov-report=term --maxfail=5 -x

    - name: Upload coverage
      uses: codecov/codecov-action@v3
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml] safety

    - name: Run Bandit Security Scan
      run: |
        bandit -r src/ -ll -i --skip B101,B311,B404,B603,B607,B324,B104,B301,B108,B110,B403 -f json -o bandit-report.json || true
        if [ -f bandit-report.json ]; then
          python -c "import json; report=json.load(open('bandit-report.json')); exit(1 if report['results'] else 0)"
        fi

    - name: Run Safety Check
      run: |
        pip install -r requirements.txt
        safety check --json || true

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        pip install -e ".[dev]"

    - name: Run performance tests
      run: |
        # Run performance tests if they exist
        python -m pytest tests/ -v -m performance -x || echo "No performance tests found"

    - name: Upload performance results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-results
        path: performance_results/
        if-no-files-found: ignore

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Build package
      run: |
        pip install build
        python -m build

    - name: Check package
      run: |
        pip install twine
        twine check dist/*

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  release:
    name: Release
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [build, security]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Publish to PyPI
      if: startsWith(github.ref, 'refs/tags/')
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
