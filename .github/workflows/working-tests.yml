name: Tests That Actually Work

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test on Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install networkx pytest pytest-asyncio
        pip install -e .

    - name: Run working tests
      env:
        USE_MINIMAL_SERVER: "true"
      run: |
        pytest tests/working/ -v --tb=short

    - name: Test server can start
      env:
        USE_MINIMAL_SERVER: "true"
      run: |
        timeout 5s python -m networkx_mcp.server < /dev/null || echo "Server started and exited cleanly"

    - name: Test legacy server warning
      env:
        USE_MINIMAL_SERVER: "false"
      run: |
        timeout 5s python -m networkx_mcp.server < /dev/null 2>&1 | grep "legacy" || echo "Legacy warning shown"

  test-implementations:
    name: Test Both Implementations
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install networkx pytest pytest-asyncio
        pip install -e .

    - name: Test minimal implementation
      env:
        USE_MINIMAL_SERVER: "true"
      run: |
        python -c "
        import os
        os.environ['USE_MINIMAL_SERVER'] = 'true'
        from networkx_mcp.server import __implementation__
        assert __implementation__ == 'minimal', f'Expected minimal, got {__implementation__}'
        print('✅ Minimal implementation loads correctly')
        "

    - name: Test legacy implementation fallback
      env:
        USE_MINIMAL_SERVER: "false"
      run: |
        python -c "
        import os, warnings
        os.environ['USE_MINIMAL_SERVER'] = 'false'
        with warnings.catch_warnings(record=True) as w:
            warnings.simplefilter('always')
            from networkx_mcp.server import __implementation__
            assert len(w) > 0, 'Expected deprecation warning'
            assert 'deprecated' in str(w[0].message).lower()
            print('✅ Legacy implementation shows deprecation warning')
        "

  quality:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        pip install black ruff

    - name: Check formatting
      run: |
        black --check --diff tests/working/ src/networkx_mcp/server*.py

    - name: Check linting
      run: |
        ruff check tests/working/ src/networkx_mcp/server*.py
